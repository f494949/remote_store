<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Collection;
use Spatie\Activitylog\LogOptions;
use Spatie\Activitylog\Traits\LogsActivity;

/**
 * App\Models\{{className}}
 */
class {{className}} extends BaseModel
{
    use HasFactory, LogsActivity;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = '{{tableName}}';

    /**
     * The primary key for the model.
     *
     * @var string
     */
    protected $primaryKey = '{{primaryKey}}';

    /**
     * The "type" of the primary key ID.
     *
     * @var string
     */
    protected $keyType = '{{keyType}}';

    /**
     * Indicates if the model should be timestamped.
     *
     * @var bool
     */
    public $timestamps = {{timestamps}};

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        {{fillable}}
    ];

    /**
     * @return LogOptions
     */
    public function getActivitylogOptions(): LogOptions
    {
        return LogOptions::defaults()
            ->useLogName('{{singular}}')
            ->logFillable()
            ->logUnguarded();
    }

    /**
     * åˆ—è¡¨
     *
     * @param array $validated
     * @return array
     */
    public static function list(array $validated): array
    {
        $model = {{className}}::{{where}};
        $total = $model->count('{{count}}');
        $data = $model
            ->orderBy($validated['sort'] ?? '{{sort}}', $validated['order'] === 'ascending' ? 'asc' : 'desc')
            ->offset(($validated['offset'] - 1) * $validated['limit'])
            ->limit($validated['limit'])
            ->select([
                {{select}}
            ])
            ->get();
        return [
            'data' => $data,
            'total' => $total
        ];
    }


    /**
     * åˆ—è¡¨
     *
     * @return Collection
     */
    public static function selectAll(): Collection
    {
        return {{className}}::select([
            {{select}}
        ])->get();
    }
}
